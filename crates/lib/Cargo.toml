[package]
name = "gamedig"
version = "1.0.0-alpha"
edition = "2024"
license = "MIT"
readme = "README.md"
homepage = "https://gamedig.github.io/"
repository = "https://github.com/gamedig/rust-gamedig"
documentation = "https://docs.rs/gamedig/latest/gamedig"
authors = ["GameDig Organization & Contributors [https://github.com/gamedig]"]
keywords = ["status", "query", "game", "protocol", "service"]
description = "Query game servers and not only."
categories = [
    "parsing",
    "encoding",
    "asynchronous",
    "network-programming",
    "parser-implementations",
]

[dependencies]
# Required Dependencies
thiserror = "2.0.12"
maybe-async = "0.2.10"
error-stack = { version = "0.5.0", features = ["spantrace"] }

# Optional Dependencies
log = { version = "0.4.26", optional = true }
hashify = { version = "0.2.6", optional = true }
serde_json = { version = "1.0.140", optional = true }
encoding_rs = { version = "0.8.35", optional = true }
async-trait = { version = "0.1.87", optional = true }
tokio = { version = "1.44.1", features = ["full"], optional = true }
serde = { version = "1.0.219", features = ["derive"], optional = true }
ureq = { version = "3.0.9", default-features = false, features = [
    "json",
    "rustls",
], optional = true }
reqwest = { version = "0.12.14", default-features = false, features = [
    "json",
    "rustls-tls",
], optional = true }

[features]
default = ["default_client_tokio"]

# Internal Features (Prefix: _<CAPS>)
## I/O
_BUFFER = []
_BUFFER_READ_LATIN_1 = ["dep:encoding_rs"]

## Net
_HTTPS = ["dep:serde_json"]
_TCP = ["_BUFFER"]
_UDP = ["_BUFFER"]

## Misc
_DEV_LOG = ["attribute_log"]

# Default Features (Prefix: default_)
#
# Util features for users to enable all features with a runtime
# without having to specify each feature individually
#
# - Only 1 can be enabled at a time as it enables rt features
default_client_std = ["socket_std", "https_std", "all"]
default_client_tokio = ["socket_tokio", "https_tokio", "all"]

# Socket Client (Prefix: socket_<RUNTIME>)
#
# A socket client is required to establish TCP/UDP connections
#
# - Only 1 socket client type can be enabled at a time
socket_std = ["maybe-async/is_sync"]
socket_tokio = ["dep:async-trait", "dep:tokio"]

# HTTPS Client (Prefix: https_<RUNTIME>)
#
# Does what it says on the tin, enables HTTPS client support.
#
# TLS is provided by rustls so that there is no need for OpenSSL.
#
# - Only 1 HTTPS client type can be enabled at a time.
# - If using socket client also insure to match the runtime.
https_std = ["maybe-async/is_sync", "dep:ureq"]
https_tokio = ["dep:async-trait", "dep:tokio", "dep:reqwest"]

# Library Features
## Attributes (Prefix: attribute_)
attribute_log = ["dep:log"]
attribute_dict = ["dep:hashify"]
attribute_serde = ["dep:serde"]
attribute_adapters = []
attribute_extended_derive = []

## Games

## Protocols
### Query
gamespy_1 = ["_UDP", "_BUFFER_READ_LATIN_1"]
gamespy_2 = ["_UDP"]
gamespy_3 = ["_UDP"]
mumble = ["_TCP"]
quake_1 = ["_UDP"]
quake_2 = ["_UDP"]
quake_3 = ["_UDP"]
teamspeak_2 = ["_TCP"]
teamspeak_3 = ["_TCP"]
unreal_2 = ["_UDP", "_BUFFER_READ_LATIN_1"]
valve = ["_UDP"]

### RCON (Prefix: rcon_)
rcon_valve_source = ["_TCP"]

## Services (Prefix: service_)
service_alt_v_mp = ["_HTTPS"]
service_beam_mp = ["_HTTPS"]
service_discord = ["_HTTPS"]
service_epic = ["_HTTPS"]
service_minetest = ["_HTTPS"]
service_rage_mp = ["_HTTPS"]
service_valve_master = ["_UDP"]

## Index
all = [
    "all_attributes",
    "all_games",
    "all_query_protocols",
    "all_rcon_protocols",
    "all_services",
]

all_attributes = [
    "attribute_log",
    "attribute_dict",
    "attribute_serde",
    "attribute_adapters",
    "attribute_extended_derive",
]

all_games = []

all_query_protocols = [
    "gamespy_1",
    "gamespy_2",
    "gamespy_3",
    "mumble",
    "quake_1",
    "quake_2",
    "quake_3",
    "teamspeak_2",
    "teamspeak_3",
    "unreal_2",
    "valve",
]

all_rcon_protocols = ["rcon_valve_source"]

all_services = [
    "service_alt_v_mp",
    "service_beam_mp",
    "service_discord",
    "service_epic",
    "service_minetest",
    "service_rage_mp",
    "service_valve_master",
]
